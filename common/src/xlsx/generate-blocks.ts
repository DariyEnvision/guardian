import { BlockType, GenerateUUIDv4, Schema, SchemaEntity } from '@guardian/interfaces';
import { XlsxResult } from './models/xlsx-result';
import { Policy, PolicyTool } from '../entity';
import { IBlock } from './interfaces/block-interface';

class TagIndexer {
    private index: number;

    constructor() {
        this.index = Date.now();
    }

    public getTag(): string {
        return `Autogenerated_${++this.index}`;
    }
}

/**
 * Generate policy config
 */
export class GenerateBlocks {
    /**
     * Generate policy config
     * @param xlsxResult
     */
    public static generate(xlsxResult: XlsxResult) {
        const tags = new TagIndexer();
        const parent = GenerateBlocks.generateContainer(xlsxResult.policy, tags);
        GenerateBlocks.addPolicyTools(xlsxResult.policy, xlsxResult.tools, parent, tags);
        GenerateBlocks.generateRequests(xlsxResult.schemas, parent, tags);
    }

    /**
     * Add block
     * @param parent
     * @param block
     */
    private static pushBlock(parent: IBlock, block: IBlock) {
        if (Array.isArray(parent.children)) {
            parent.children.push(block);
        } else {
            parent.children = [block];
        }
    }

    /**
     * Add block
     * @param parent
     * @param block
     */
    private static unshiftBlock(parent: IBlock, block: IBlock) {
        if (Array.isArray(parent.children)) {
            parent.children.unshift(block);
        } else {
            parent.children = [block];
        }
    }

    /**
     * Generate block
     * @param config
     */
    private static generateBlock(config: any): IBlock {
        return {
            id: GenerateUUIDv4(),
            defaultActive: true,
            children: [],
            permissions: [],
            artifacts: [],
            ...config
        } as IBlock;
    }

    /**
     * Find tool ids
     * @param block
     * @param result
     */
    private static findTools(block: any, result: Set<string>) {
        if (!block) {
            return;
        }
        if (block.blockType === BlockType.Tool) {
            if (block.messageId && typeof block.messageId === 'string') {
                result.add(block.messageId);
            }
        } else {
            if (Array.isArray(block.children)) {
                for (const child of block.children) {
                    GenerateBlocks.findTools(child, result);
                }
            }
        }
    }

    /**
     * Generate Tool
     * @param policy
     * @param tools
     */
    private static addPolicyTools(
        policy: Policy,
        tools: PolicyTool[],
        parent: IBlock,
        tags: TagIndexer
    ): void {
        const toolIds = new Set<string>();
        GenerateBlocks.findTools(policy.config, toolIds);
        for (const tool of tools) {
            if (!toolIds.has(tool.messageId)) {
                toolIds.add(tool.messageId);
                const block = GenerateBlocks.generateBlock({
                    tag: tags.getTag(),
                    blockType: BlockType.Tool,
                    hash: tool.hash,
                    messageId: tool.messageId,
                    inputEvents: tool.config?.inputEvents,
                    outputEvents: tool.config?.outputEvents,
                    variables: tool.config?.variables,
                    innerEvents: []
                })
                GenerateBlocks.pushBlock(parent, block);
            }
        }
    }

    /**
     * Generate Container
     * @param policy
     * @param schemas
     */
    private static generateContainer(
        policy: Policy,
        tags: TagIndexer
    ): IBlock {
        const parent = GenerateBlocks.generateBlock({
            tag: tags.getTag(),
            blockType: BlockType.Container
        });
        GenerateBlocks.unshiftBlock(policy.config, parent);
        return parent;
    }

    /**
     * Generate Requests
     * @param policy
     * @param schemas
     */
    private static generateRequests(
        schemas: Schema[],
        parent: IBlock,
        tags: TagIndexer
    ): void {
        for (const schema of schemas) {
            if (schema.entity === SchemaEntity.VC) {
                const requestContainer = GenerateBlocks.generateBlock({
                    tag: tags.getTag(),
                    blockType: BlockType.Container
                });
                GenerateBlocks.generateRequest(requestContainer, schema, tags);
                GenerateBlocks.generateCalculation(requestContainer, schema, tags);
                GenerateBlocks.pushBlock(parent, requestContainer);
            }
        }
    }

    /**
     * Generate Request
     * @param parent
     * @param schema
     */
    private static generateRequest(
        parent: IBlock,
        schema: Schema,
        tags: TagIndexer
    ): void {
        const request = GenerateBlocks.generateBlock({
            tag: tags.getTag(),
            blockType: BlockType.Request,
            schema: schema.iri,
            idType: 'UUID',
            presetFields: []
        });
        GenerateBlocks.pushBlock(parent, request);
    }

    /**
     * Generate CustomLogicBlock
     * @param parent
     * @param schema
     */
    private static generateCalculation(
        parent: IBlock,
        schema: Schema,
        tags: TagIndexer
    ): void {
        const expression = GenerateBlocks.generateExpression(schema);
        if (expression) {
            const calculation = GenerateBlocks.generateBlock({
                tag: tags.getTag(),
                blockType: BlockType.CustomLogicBlock,
                expression,
                documentSigner: '',
                idType: 'UUID',
                outputSchema: schema.iri,
            });
            GenerateBlocks.pushBlock(parent, calculation);
        }
    }

    /**
     * Generate Expression
     * @param schema
     */
    private static generateExpression(schema: Schema): string {
        return '';
    }
}