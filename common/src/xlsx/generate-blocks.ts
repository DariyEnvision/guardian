import { BlockType, GenerateUUIDv4, Schema } from '@guardian/interfaces';
import { XlsxResult } from './models/xlsx-result';
import { Policy, PolicyTool } from '../entity';
import { IBlock } from './interfaces/block-interface';

/**
 * Generate policy config
 */
export class GenerateBlocks {
    /**
     * Generate policy config
     * @param xlsxResult
     */
    public static generate(xlsxResult: XlsxResult) {
        GenerateBlocks.addPolicyTools(xlsxResult.policy, xlsxResult.tools);
        GenerateBlocks.generateRequests(xlsxResult.policy, xlsxResult.schemas);
    }

    /**
     * Add block
     * @param parent
     * @param block
     */
    private static addBlock(parent: IBlock, block: IBlock) {
        if (Array.isArray(parent.children)) {
            parent.children.unshift(block);
        } else {
            parent.children = [block];
        }
    }

    /**
     * Generate block
     * @param config
     */
    private static generateBlock(config: any): IBlock {
        return {
            id: GenerateUUIDv4(),
            defaultActive: true,
            children: [],
            permissions: [],
            artifacts: [],
            ...config
        } as IBlock;
    }

    /**
     * Find tool ids
     * @param block
     * @param result
     */
    private static findTools(block: any, result: Set<string>) {
        if (!block) {
            return;
        }
        if (block.blockType === BlockType.Tool) {
            if (block.messageId && typeof block.messageId === 'string') {
                result.add(block.messageId);
            }
        } else {
            if (Array.isArray(block.children)) {
                for (const child of block.children) {
                    GenerateBlocks.findTools(child, result);
                }
            }
        }
    }

    /**
     * Generate Tool
     * @param policy
     * @param tools
     */
    private static addPolicyTools(policy: Policy, tools: PolicyTool[]): void {
        const toolIds = new Set<string>();
        GenerateBlocks.findTools(policy.config, toolIds);
        for (const tool of tools) {
            if (!toolIds.has(tool.messageId)) {
                toolIds.add(tool.messageId);
                const block = GenerateBlocks.generateBlock({
                    tag: 'Autogenerated',
                    blockType: BlockType.Tool,
                    hash: tool.hash,
                    messageId: tool.messageId,
                    inputEvents: tool.config?.inputEvents,
                    outputEvents: tool.config?.outputEvents,
                    variables: tool.config?.variables,
                    innerEvents: []
                })
                GenerateBlocks.addBlock(policy.config, block);
            }
        }
    }

    /**
     * Generate Requests
     * @param policy
     * @param schemas
     */
    private static generateRequests(policy: Policy, schemas: Schema[]): void {
        for (const schema of schemas) {
            const parent = GenerateBlocks.generateBlock({
                tag: 'Autogenerated',
                blockType: BlockType.Container
            });
            GenerateBlocks.generateRequest(parent, schema);
            GenerateBlocks.generateCalculation(parent, schema);
            GenerateBlocks.addBlock(policy.config, parent);
        }
    }

    /**
     * Generate Request
     * @param parent
     * @param schema
     */
    private static generateRequest(parent: IBlock, schema: Schema): void {
        const request = GenerateBlocks.generateBlock({
            tag: 'Autogenerated',
            blockType: BlockType.Request,
            schema: schema.iri,
            idType: 'UUID',
            presetFields: []
        });
        GenerateBlocks.addBlock(parent, request);
    }

    /**
     * Generate CustomLogicBlock
     * @param parent
     * @param schema
     */
    private static generateCalculation(parent: IBlock, schema: Schema): void {
        const expression = GenerateBlocks.generateExpression(schema);
        if (expression) {
            const calculation = GenerateBlocks.generateBlock({
                tag: 'Autogenerated',
                blockType: BlockType.CustomLogicBlock,
                expression,
                documentSigner: '',
                idType: 'UUID',
                outputSchema: schema.iri,
            });
            GenerateBlocks.addBlock(parent, calculation);
        }
    }

    /**
     * Generate Expression
     * @param schema
     */
    private static generateExpression(schema: Schema): string {
        return '';
    }
}


